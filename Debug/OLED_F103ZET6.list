
OLED_F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fdc  08002fdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fdc  08002fdc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fdc  08002fdc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000000c  08002ff0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08002ff0  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006d6d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001722  00000000  00000000  00026de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00028508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff4  00000000  00000000  00028cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaa5  00000000  00000000  00041cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090515  00000000  00000000  0004c769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000005ed  00000000  00000000  000dcc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ea4  00000000  00000000  000dd26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000df110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002648 	.word	0x08002648

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002648 	.word	0x08002648

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x28>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <MX_GPIO_Init+0x28>)
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x28>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0308 	and.w	r3, r3, #8
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40021000 	.word	0x40021000

08000250 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <MX_I2C2_Init+0x50>)
 8000256:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <MX_I2C2_Init+0x54>)
 8000258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_I2C2_Init+0x50>)
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <MX_I2C2_Init+0x58>)
 800025e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_I2C2_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_I2C2_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_I2C2_Init+0x50>)
 800026e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000272:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <MX_I2C2_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_I2C2_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <MX_I2C2_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_I2C2_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_I2C2_Init+0x50>)
 800028e:	f001 f8f9 	bl	8001484 <HAL_I2C_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 f8d9 	bl	800044e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000028 	.word	0x20000028
 80002a4:	40005800 	.word	0x40005800
 80002a8:	00061a80 	.word	0x00061a80

080002ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a16      	ldr	r2, [pc, #88]	; (8000320 <HAL_I2C_MspInit+0x74>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d124      	bne.n	8000316 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <HAL_I2C_MspInit+0x78>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <HAL_I2C_MspInit+0x78>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <HAL_I2C_MspInit+0x78>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0308 	and.w	r3, r3, #8
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80002e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80002e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002ea:	2312      	movs	r3, #18
 80002ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ee:	2303      	movs	r3, #3
 80002f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	4619      	mov	r1, r3
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <HAL_I2C_MspInit+0x7c>)
 80002fa:	f000 ff2f 	bl	800115c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <HAL_I2C_MspInit+0x78>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <HAL_I2C_MspInit+0x78>)
 8000304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_I2C_MspInit+0x78>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000316:	bf00      	nop
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40005800 	.word	0x40005800
 8000324:	40021000 	.word	0x40021000
 8000328:	40010c00 	.word	0x40010c00

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000332:	f000 fda9 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000336:	f000 f845 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f7ff ff73 	bl	8000224 <MX_GPIO_Init>
  MX_I2C2_Init();
 800033e:	f7ff ff87 	bl	8000250 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(20);
 8000342:	2014      	movs	r0, #20
 8000344:	f000 fe02 	bl	8000f4c <HAL_Delay>
  OLED_Init();
 8000348:	f000 f8ae 	bl	80004a8 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i = 0; i < 128; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	e02c      	b.n	80003ac <main+0x80>
	  {
		  OLED_NewFrame();
 8000352:	f000 f905 	bl	8000560 <OLED_NewFrame>

		  OLED_DrawCircle(64, 32, i, OLED_COLOR_NORMAL);
 8000356:	79fa      	ldrb	r2, [r7, #7]
 8000358:	2300      	movs	r3, #0
 800035a:	2120      	movs	r1, #32
 800035c:	2040      	movs	r0, #64	; 0x40
 800035e:	f000 fb24 	bl	80009aa <OLED_DrawCircle>
		  OLED_DrawCircle(64, 32, 2*i, OLED_COLOR_NORMAL);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	2300      	movs	r3, #0
 800036a:	2120      	movs	r1, #32
 800036c:	2040      	movs	r0, #64	; 0x40
 800036e:	f000 fb1c 	bl	80009aa <OLED_DrawCircle>
		  OLED_DrawCircle(64, 32, 3*i, OLED_COLOR_NORMAL);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	461a      	mov	r2, r3
 8000376:	0052      	lsls	r2, r2, #1
 8000378:	4413      	add	r3, r2
 800037a:	b2da      	uxtb	r2, r3
 800037c:	2300      	movs	r3, #0
 800037e:	2120      	movs	r1, #32
 8000380:	2040      	movs	r0, #64	; 0x40
 8000382:	f000 fb12 	bl	80009aa <OLED_DrawCircle>

		  OLED_DrawImage(27, 0, &ShixiaomiaoImg, OLED_COLOR_NORMAL);
 8000386:	2300      	movs	r3, #0
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <main+0x8c>)
 800038a:	2100      	movs	r1, #0
 800038c:	201b      	movs	r0, #27
 800038e:	f000 fbe8 	bl	8000b62 <OLED_DrawImage>
		  OLED_PrintString(i, 40, "狮小喵", &font24x24, OLED_COLOR_NORMAL);
 8000392:	79f8      	ldrb	r0, [r7, #7]
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <main+0x90>)
 800039a:	4a09      	ldr	r2, [pc, #36]	; (80003c0 <main+0x94>)
 800039c:	2128      	movs	r1, #40	; 0x28
 800039e:	f000 fc56 	bl	8000c4e <OLED_PrintString>

		  OLED_ShowFrame();
 80003a2:	f000 f8e9 	bl	8000578 <OLED_ShowFrame>
	  for(uint8_t i = 0; i < 128; i++)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	3301      	adds	r3, #1
 80003aa:	71fb      	strb	r3, [r7, #7]
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	dace      	bge.n	8000352 <main+0x26>
 80003b4:	e7ca      	b.n	800034c <main+0x20>
 80003b6:	bf00      	nop
 80003b8:	08002fa8 	.word	0x08002fa8
 80003bc:	08002d48 	.word	0x08002d48
 80003c0:	08002660 	.word	0x08002660

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 f8fe 	bl	80025d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f8:	2302      	movs	r3, #2
 80003fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000402:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000406:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	4618      	mov	r0, r3
 800040e:	f001 fcd5 	bl	8001dbc <HAL_RCC_OscConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000418:	f000 f819 	bl	800044e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041c:	230f      	movs	r3, #15
 800041e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000420:	2302      	movs	r3, #2
 8000422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2102      	movs	r1, #2
 8000436:	4618      	mov	r0, r3
 8000438:	f001 ff42 	bl	80022c0 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000442:	f000 f804 	bl	800044e <Error_Handler>
  }
}
 8000446:	bf00      	nop
 8000448:	3740      	adds	r7, #64	; 0x40
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000452:	b672      	cpsid	i
}
 8000454:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000456:	e7fe      	b.n	8000456 <Error_Handler+0x8>

08000458 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c2, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	b29b      	uxth	r3, r3
 8000468:	f04f 32ff 	mov.w	r2, #4294967295
 800046c:	9200      	str	r2, [sp, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	2178      	movs	r1, #120	; 0x78
 8000472:	4803      	ldr	r0, [pc, #12]	; (8000480 <OLED_Send+0x28>)
 8000474:	f001 f94a 	bl	800170c <HAL_I2C_Master_Transmit>
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000028 	.word	0x20000028

08000484 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <OLED_SendCmd+0x20>)
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000494:	2102      	movs	r1, #2
 8000496:	4803      	ldr	r0, [pc, #12]	; (80004a4 <OLED_SendCmd+0x20>)
 8000498:	f7ff ffde 	bl	8000458 <OLED_Send>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000047c 	.word	0x2000047c

080004a8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80004ac:	20ae      	movs	r0, #174	; 0xae
 80004ae:	f7ff ffe9 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 80004b2:	2020      	movs	r0, #32
 80004b4:	f7ff ffe6 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80004b8:	2010      	movs	r0, #16
 80004ba:	f7ff ffe3 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 80004be:	20b0      	movs	r0, #176	; 0xb0
 80004c0:	f7ff ffe0 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 80004c4:	20c8      	movs	r0, #200	; 0xc8
 80004c6:	f7ff ffdd 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffda 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80004d0:	2010      	movs	r0, #16
 80004d2:	f7ff ffd7 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80004d6:	2040      	movs	r0, #64	; 0x40
 80004d8:	f7ff ffd4 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80004dc:	2081      	movs	r0, #129	; 0x81
 80004de:	f7ff ffd1 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80004e2:	20df      	movs	r0, #223	; 0xdf
 80004e4:	f7ff ffce 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80004e8:	20a1      	movs	r0, #161	; 0xa1
 80004ea:	f7ff ffcb 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80004ee:	20a6      	movs	r0, #166	; 0xa6
 80004f0:	f7ff ffc8 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80004f4:	20a8      	movs	r0, #168	; 0xa8
 80004f6:	f7ff ffc5 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80004fa:	203f      	movs	r0, #63	; 0x3f
 80004fc:	f7ff ffc2 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8000500:	20a4      	movs	r0, #164	; 0xa4
 8000502:	f7ff ffbf 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000506:	20d3      	movs	r0, #211	; 0xd3
 8000508:	f7ff ffbc 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff ffb9 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8000512:	20d5      	movs	r0, #213	; 0xd5
 8000514:	f7ff ffb6 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8000518:	20f0      	movs	r0, #240	; 0xf0
 800051a:	f7ff ffb3 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800051e:	20d9      	movs	r0, #217	; 0xd9
 8000520:	f7ff ffb0 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8000524:	2022      	movs	r0, #34	; 0x22
 8000526:	f7ff ffad 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800052a:	20da      	movs	r0, #218	; 0xda
 800052c:	f7ff ffaa 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000530:	2012      	movs	r0, #18
 8000532:	f7ff ffa7 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000536:	20db      	movs	r0, #219	; 0xdb
 8000538:	f7ff ffa4 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800053c:	2020      	movs	r0, #32
 800053e:	f7ff ffa1 	bl	8000484 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000542:	208d      	movs	r0, #141	; 0x8d
 8000544:	f7ff ff9e 	bl	8000484 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000548:	2014      	movs	r0, #20
 800054a:	f7ff ff9b 	bl	8000484 <OLED_SendCmd>

  OLED_NewFrame();
 800054e:	f000 f807 	bl	8000560 <OLED_NewFrame>
  OLED_ShowFrame();
 8000552:	f000 f811 	bl	8000578 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000556:	20af      	movs	r0, #175	; 0xaf
 8000558:	f7ff ff94 	bl	8000484 <OLED_SendCmd>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000568:	2100      	movs	r1, #0
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <OLED_NewFrame+0x14>)
 800056c:	f002 f832 	bl	80025d4 <memset>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000007c 	.word	0x2000007c

08000578 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <OLED_ShowFrame+0x5c>)
 8000580:	2240      	movs	r2, #64	; 0x40
 8000582:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	e01b      	b.n	80005c2 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	3b50      	subs	r3, #80	; 0x50
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff77 	bl	8000484 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff74 	bl	8000484 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 800059c:	2010      	movs	r0, #16
 800059e:	f7ff ff71 	bl	8000484 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <OLED_ShowFrame+0x60>)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	01db      	lsls	r3, r3, #7
 80005a8:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <OLED_ShowFrame+0x64>)
 80005aa:	4413      	add	r3, r2
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	4619      	mov	r1, r3
 80005b0:	f002 f83c 	bl	800262c <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80005b4:	2181      	movs	r1, #129	; 0x81
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <OLED_ShowFrame+0x5c>)
 80005b8:	f7ff ff4e 	bl	8000458 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	3301      	adds	r3, #1
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b07      	cmp	r3, #7
 80005c6:	d9e0      	bls.n	800058a <OLED_ShowFrame+0x12>
  }
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000480 	.word	0x20000480
 80005d8:	20000481 	.word	0x20000481
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <OLED_SetPixel>:
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	460b      	mov	r3, r1
 80005ec:	71bb      	strb	r3, [r7, #6]
 80005ee:	4613      	mov	r3, r2
 80005f0:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db43      	blt.n	8000682 <OLED_SetPixel+0xa2>
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	2b3f      	cmp	r3, #63	; 0x3f
 80005fe:	d840      	bhi.n	8000682 <OLED_SetPixel+0xa2>
    return;
  if (!color)
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d11d      	bne.n	8000642 <OLED_SetPixel+0x62>
  {
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	08db      	lsrs	r3, r3, #3
 800060a:	b2d8      	uxtb	r0, r3
 800060c:	4602      	mov	r2, r0
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	491e      	ldr	r1, [pc, #120]	; (800068c <OLED_SetPixel+0xac>)
 8000612:	01d2      	lsls	r2, r2, #7
 8000614:	440a      	add	r2, r1
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b25a      	sxtb	r2, r3
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	b25b      	sxtb	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b259      	sxtb	r1, r3
 800062e:	4602      	mov	r2, r0
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b2c8      	uxtb	r0, r1
 8000634:	4915      	ldr	r1, [pc, #84]	; (800068c <OLED_SetPixel+0xac>)
 8000636:	01d2      	lsls	r2, r2, #7
 8000638:	440a      	add	r2, r1
 800063a:	4413      	add	r3, r2
 800063c:	4602      	mov	r2, r0
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e020      	b.n	8000684 <OLED_SetPixel+0xa4>
  }
  else
  {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b2d8      	uxtb	r0, r3
 8000648:	4602      	mov	r2, r0
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	490f      	ldr	r1, [pc, #60]	; (800068c <OLED_SetPixel+0xac>)
 800064e:	01d2      	lsls	r2, r2, #7
 8000650:	440a      	add	r2, r1
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b25a      	sxtb	r2, r3
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	2101      	movs	r1, #1
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	b25b      	sxtb	r3, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	b25b      	sxtb	r3, r3
 800066a:	4013      	ands	r3, r2
 800066c:	b259      	sxtb	r1, r3
 800066e:	4602      	mov	r2, r0
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	b2c8      	uxtb	r0, r1
 8000674:	4905      	ldr	r1, [pc, #20]	; (800068c <OLED_SetPixel+0xac>)
 8000676:	01d2      	lsls	r2, r2, #7
 8000678:	440a      	add	r2, r1
 800067a:	4413      	add	r3, r2
 800067c:	4602      	mov	r2, r0
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e000      	b.n	8000684 <OLED_SetPixel+0xa4>
    return;
 8000682:	bf00      	nop
  }
}
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	2000007c 	.word	0x2000007c

08000690 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8000690:	b490      	push	{r4, r7}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	4603      	mov	r3, r0
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	460b      	mov	r3, r1
 80006a8:	717b      	strb	r3, [r7, #5]
 80006aa:	4613      	mov	r3, r2
 80006ac:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	d860      	bhi.n	8000776 <OLED_SetByte_Fine+0xe6>
 80006b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db5c      	blt.n	8000776 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80006bc:	7d3b      	ldrb	r3, [r7, #20]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	43db      	mvns	r3, r3
 80006c6:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80006c8:	7c3b      	ldrb	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	22ff      	movs	r2, #255	; 0xff
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	793b      	ldrb	r3, [r7, #4]
 80006de:	f1c3 0308 	rsb	r3, r3, #8
 80006e2:	21ff      	movs	r1, #255	; 0xff
 80006e4:	fa41 f303 	asr.w	r3, r1, r3
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <OLED_SetByte_Fine+0xf0>)
 80006f2:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	4922      	ldr	r1, [pc, #136]	; (8000784 <OLED_SetByte_Fine+0xf4>)
 80006fa:	01d2      	lsls	r2, r2, #7
 80006fc:	440a      	add	r2, r1
 80006fe:	4413      	add	r3, r2
 8000700:	7818      	ldrb	r0, [r3, #0]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <OLED_SetByte_Fine+0xf0>)
 8000704:	7819      	ldrb	r1, [r3, #0]
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	4001      	ands	r1, r0
 800070c:	b2c8      	uxtb	r0, r1
 800070e:	491d      	ldr	r1, [pc, #116]	; (8000784 <OLED_SetByte_Fine+0xf4>)
 8000710:	01d2      	lsls	r2, r2, #7
 8000712:	440a      	add	r2, r1
 8000714:	4413      	add	r3, r2
 8000716:	4602      	mov	r2, r0
 8000718:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800071a:	7c3b      	ldrb	r3, [r7, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b25b      	sxtb	r3, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	b25a      	sxtb	r2, r3
 800072a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800072e:	4013      	ands	r3, r2
 8000730:	b25a      	sxtb	r2, r3
 8000732:	793b      	ldrb	r3, [r7, #4]
 8000734:	f1c3 0308 	rsb	r3, r3, #8
 8000738:	21ff      	movs	r1, #255	; 0xff
 800073a:	fa41 f303 	asr.w	r3, r1, r3
 800073e:	b25b      	sxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b25b      	sxtb	r3, r3
 8000744:	4013      	ands	r3, r2
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <OLED_SetByte_Fine+0xf0>)
 800074c:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	490c      	ldr	r1, [pc, #48]	; (8000784 <OLED_SetByte_Fine+0xf4>)
 8000754:	01d2      	lsls	r2, r2, #7
 8000756:	440a      	add	r2, r1
 8000758:	4413      	add	r3, r2
 800075a:	7818      	ldrb	r0, [r3, #0]
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <OLED_SetByte_Fine+0xf0>)
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	4301      	orrs	r1, r0
 8000766:	b2c8      	uxtb	r0, r1
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <OLED_SetByte_Fine+0xf4>)
 800076a:	01d2      	lsls	r2, r2, #7
 800076c:	440a      	add	r2, r1
 800076e:	4413      	add	r3, r2
 8000770:	4602      	mov	r2, r0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e000      	b.n	8000778 <OLED_SetByte_Fine+0xe8>
    return;
 8000776:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bc90      	pop	{r4, r7}
 800077e:	4770      	bx	lr
 8000780:	20000501 	.word	0x20000501
 8000784:	2000007c 	.word	0x2000007c

08000788 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4623      	mov	r3, r4
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
 800079e:	460b      	mov	r3, r1
 80007a0:	717b      	strb	r3, [r7, #5]
 80007a2:	4613      	mov	r3, r2
 80007a4:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80007b4:	7bba      	ldrb	r2, [r7, #14]
 80007b6:	793b      	ldrb	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	dd29      	ble.n	8000812 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80007be:	797a      	ldrb	r2, [r7, #5]
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	7bbc      	ldrb	r4, [r7, #14]
 80007ca:	79f9      	ldrb	r1, [r7, #7]
 80007cc:	7bf8      	ldrb	r0, [r7, #15]
 80007ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2307      	movs	r3, #7
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4623      	mov	r3, r4
 80007da:	f7ff ff59 	bl	8000690 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2d8      	uxtb	r0, r3
 80007e4:	797a      	ldrb	r2, [r7, #5]
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	f1c3 0308 	rsb	r3, r3, #8
 80007ec:	fa42 f303 	asr.w	r3, r2, r3
 80007f0:	b2dc      	uxtb	r4, r3
 80007f2:	793a      	ldrb	r2, [r7, #4]
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	4413      	add	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3b09      	subs	r3, #9
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	79f9      	ldrb	r1, [r7, #7]
 8000800:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000804:	9201      	str	r2, [sp, #4]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	4622      	mov	r2, r4
 800080c:	f7ff ff40 	bl	8000690 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000810:	e015      	b.n	800083e <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000812:	797a      	ldrb	r2, [r7, #5]
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b2dc      	uxtb	r4, r3
 800081c:	7bba      	ldrb	r2, [r7, #14]
 800081e:	793b      	ldrb	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	3b01      	subs	r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7bbd      	ldrb	r5, [r7, #14]
 800082a:	79f9      	ldrb	r1, [r7, #7]
 800082c:	7bf8      	ldrb	r0, [r7, #15]
 800082e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	462b      	mov	r3, r5
 8000838:	4622      	mov	r2, r4
 800083a:	f7ff ff29 	bl	8000690 <OLED_SetByte_Fine>
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bdb0      	pop	{r4, r5, r7, pc}

08000846 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8000846:	b590      	push	{r4, r7, lr}
 8000848:	b087      	sub	sp, #28
 800084a:	af02      	add	r7, sp, #8
 800084c:	4604      	mov	r4, r0
 800084e:	4608      	mov	r0, r1
 8000850:	4611      	mov	r1, r2
 8000852:	461a      	mov	r2, r3
 8000854:	4623      	mov	r3, r4
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	4603      	mov	r3, r0
 800085a:	71bb      	strb	r3, [r7, #6]
 800085c:	460b      	mov	r3, r1
 800085e:	717b      	strb	r3, [r7, #5]
 8000860:	4613      	mov	r3, r2
 8000862:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	08db      	lsrs	r3, r3, #3
 8000868:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000872:	797a      	ldrb	r2, [r7, #5]
 8000874:	7bbb      	ldrb	r3, [r7, #14]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	7bbc      	ldrb	r4, [r7, #14]
 800087e:	79f9      	ldrb	r1, [r7, #7]
 8000880:	7bf8      	ldrb	r0, [r7, #15]
 8000882:	793b      	ldrb	r3, [r7, #4]
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2307      	movs	r3, #7
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	4623      	mov	r3, r4
 800088c:	f7ff ff00 	bl	8000690 <OLED_SetByte_Fine>
  if (bit)
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d014      	beq.n	80008c0 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	3301      	adds	r3, #1
 800089a:	b2d8      	uxtb	r0, r3
 800089c:	797a      	ldrb	r2, [r7, #5]
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	f1c3 0308 	rsb	r3, r3, #8
 80008a4:	fa42 f303 	asr.w	r3, r2, r3
 80008a8:	b2dc      	uxtb	r4, r3
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	79f9      	ldrb	r1, [r7, #7]
 80008b2:	793a      	ldrb	r2, [r7, #4]
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	4622      	mov	r2, r4
 80008bc:	f7ff fee8 	bl	8000690 <OLED_SetByte_Fine>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}

080008c8 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	603a      	str	r2, [r7, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	460b      	mov	r3, r1
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	4613      	mov	r3, r2
 80008dc:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80008de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80008e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	e025      	b.n	8000942 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	73bb      	strb	r3, [r7, #14]
 80008fa:	e01b      	b.n	8000934 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	4413      	add	r3, r2
 8000902:	b2d8      	uxtb	r0, r3
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	4413      	add	r3, r2
 800090e:	b2dc      	uxtb	r4, r3
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	7979      	ldrb	r1, [r7, #5]
 8000916:	fb01 f303 	mul.w	r3, r1, r3
 800091a:	4413      	add	r3, r2
 800091c:	461a      	mov	r2, r3
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	4413      	add	r3, r2
 8000922:	781a      	ldrb	r2, [r3, #0]
 8000924:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000928:	4621      	mov	r1, r4
 800092a:	f7ff ff8c 	bl	8000846 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	3301      	adds	r3, #1
 8000932:	73bb      	strb	r3, [r7, #14]
 8000934:	7bba      	ldrb	r2, [r7, #14]
 8000936:	7b3b      	ldrb	r3, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3df      	bcc.n	80008fc <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	3301      	adds	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3d5      	bcc.n	80008f6 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d028      	beq.n	80009a2 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000950:	797b      	ldrb	r3, [r7, #5]
 8000952:	b29b      	uxth	r3, r3
 8000954:	7b3a      	ldrb	r2, [r7, #12]
 8000956:	b292      	uxth	r2, r2
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	737b      	strb	r3, [r7, #13]
 8000962:	e01a      	b.n	800099a <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	7b7b      	ldrb	r3, [r7, #13]
 8000968:	4413      	add	r3, r2
 800096a:	b2d8      	uxtb	r0, r3
 800096c:	7b3b      	ldrb	r3, [r7, #12]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	b2da      	uxtb	r2, r3
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	4413      	add	r3, r2
 8000976:	b2d9      	uxtb	r1, r3
 8000978:	893a      	ldrh	r2, [r7, #8]
 800097a:	7b7b      	ldrb	r3, [r7, #13]
 800097c:	4413      	add	r3, r2
 800097e:	461a      	mov	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4413      	add	r3, r2
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	7afc      	ldrb	r4, [r7, #11]
 8000988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	4623      	mov	r3, r4
 8000990:	f7ff fefa 	bl	8000788 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8000994:	7b7b      	ldrb	r3, [r7, #13]
 8000996:	3301      	adds	r3, #1
 8000998:	737b      	strb	r3, [r7, #13]
 800099a:	7b7a      	ldrb	r2, [r7, #13]
 800099c:	797b      	ldrb	r3, [r7, #5]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d3e0      	bcc.n	8000964 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd90      	pop	{r4, r7, pc}

080009aa <OLED_DrawCircle>:
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color)
{
 80009aa:	b590      	push	{r4, r7, lr}
 80009ac:	b085      	sub	sp, #20
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4604      	mov	r4, r0
 80009b2:	4608      	mov	r0, r1
 80009b4:	4611      	mov	r1, r2
 80009b6:	461a      	mov	r2, r3
 80009b8:	4623      	mov	r3, r4
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4603      	mov	r3, r0
 80009be:	71bb      	strb	r3, [r7, #6]
 80009c0:	460b      	mov	r3, r1
 80009c2:	717b      	strb	r3, [r7, #5]
 80009c4:	4613      	mov	r3, r2
 80009c6:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	81fb      	strh	r3, [r7, #14]
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	81bb      	strh	r3, [r7, #12]
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	f1c3 0303 	rsb	r3, r3, #3
 80009dc:	b29b      	uxth	r3, r3
 80009de:	817b      	strh	r3, [r7, #10]
  while (a <= b)
 80009e0:	e0b3      	b.n	8000b4a <OLED_DrawCircle+0x1a0>
  {
    OLED_SetPixel(x - b, y - a, color);
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	b2d8      	uxtb	r0, r3
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	79ba      	ldrb	r2, [r7, #6]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	793a      	ldrb	r2, [r7, #4]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f7ff fdf1 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4413      	add	r3, r2
 8000a06:	b2d8      	uxtb	r0, r3
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	79ba      	ldrb	r2, [r7, #6]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	793a      	ldrb	r2, [r7, #4]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff fde3 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b2d8      	uxtb	r0, r3
 8000a24:	89bb      	ldrh	r3, [r7, #12]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	793a      	ldrb	r2, [r7, #4]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f7ff fdd5 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	b2d8      	uxtb	r0, r3
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	793a      	ldrb	r2, [r7, #4]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f7ff fdc7 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	b2d8      	uxtb	r0, r3
 8000a5c:	89bb      	ldrh	r3, [r7, #12]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	79ba      	ldrb	r2, [r7, #6]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	793a      	ldrb	r2, [r7, #4]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f7ff fdb9 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 8000a6e:	89bb      	ldrh	r3, [r7, #12]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4413      	add	r3, r2
 8000a76:	b2d8      	uxtb	r0, r3
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	793a      	ldrb	r2, [r7, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f7ff fdab 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4413      	add	r3, r2
 8000a92:	b2d8      	uxtb	r0, r3
 8000a94:	89bb      	ldrh	r3, [r7, #12]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	793a      	ldrb	r2, [r7, #4]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f7ff fd9d 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4413      	add	r3, r2
 8000aae:	b2d8      	uxtb	r0, r3
 8000ab0:	89bb      	ldrh	r3, [r7, #12]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	793a      	ldrb	r2, [r7, #4]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f7ff fd8f 	bl	80005e0 <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8000ac2:	89bb      	ldrh	r3, [r7, #12]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b2d8      	uxtb	r0, r3
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	793a      	ldrb	r2, [r7, #4]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff fd81 	bl	80005e0 <OLED_SetPixel>
    a++;
 8000ade:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	81fb      	strh	r3, [r7, #14]
    if (di < 0)
 8000aea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da09      	bge.n	8000b06 <OLED_DrawCircle+0x15c>
    {
      di += 4 * a + 6;
 8000af2:	89fb      	ldrh	r3, [r7, #14]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	897b      	ldrh	r3, [r7, #10]
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3306      	adds	r3, #6
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	817b      	strh	r3, [r7, #10]
 8000b04:	e013      	b.n	8000b2e <OLED_DrawCircle+0x184>
    }
    else
    {
      di += 10 + 4 * (a - b);
 8000b06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	897b      	ldrh	r3, [r7, #10]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	330a      	adds	r3, #10
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	817b      	strh	r3, [r7, #10]
      b--;
 8000b22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2d8      	uxtb	r0, r3
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	793a      	ldrb	r2, [r7, #4]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f7ff fd4b 	bl	80005e0 <OLED_SetPixel>
  while (a <= b)
 8000b4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f77f af45 	ble.w	80009e2 <OLED_DrawCircle+0x38>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <OLED_DrawImage>:
 * @param y 起始点纵坐标
 * @param img 图片
 * @param color 颜色
 */
void OLED_DrawImage(uint8_t x, uint8_t y, const Image *img, OLED_ColorMode color)
{
 8000b62:	b5b0      	push	{r4, r5, r7, lr}
 8000b64:	b084      	sub	sp, #16
 8000b66:	af02      	add	r7, sp, #8
 8000b68:	603a      	str	r2, [r7, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	460b      	mov	r3, r1
 8000b72:	71bb      	strb	r3, [r7, #6]
 8000b74:	4613      	mov	r3, r2
 8000b76:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, img->data, img->w, img->h, color);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685c      	ldr	r4, [r3, #4]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	781d      	ldrb	r5, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	79b9      	ldrb	r1, [r7, #6]
 8000b86:	79f8      	ldrb	r0, [r7, #7]
 8000b88:	797a      	ldrb	r2, [r7, #5]
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	462b      	mov	r3, r5
 8000b90:	4622      	mov	r2, r4
 8000b92:	f7ff fe99 	bl	80008c8 <OLED_SetBlock>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bdb0      	pop	{r4, r5, r7, pc}

08000b9e <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8000b9e:	b5b0      	push	{r4, r5, r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	460b      	mov	r3, r1
 8000bac:	71bb      	strb	r3, [r7, #6]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	797b      	ldrb	r3, [r7, #5]
 8000bb8:	f1a3 0120 	sub.w	r1, r3, #32
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da00      	bge.n	8000bc8 <OLED_PrintASCIIChar+0x2a>
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	10db      	asrs	r3, r3, #3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	fb00 f303 	mul.w	r3, r0, r3
 8000bd4:	fb01 f303 	mul.w	r3, r1, r3
 8000bd8:	18d4      	adds	r4, r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	785d      	ldrb	r5, [r3, #1]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	79b9      	ldrb	r1, [r7, #6]
 8000be4:	79f8      	ldrb	r0, [r7, #7]
 8000be6:	7e3a      	ldrb	r2, [r7, #24]
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	462b      	mov	r3, r5
 8000bee:	4622      	mov	r2, r4
 8000bf0:	f7ff fe6a 	bl	80008c8 <OLED_SetBlock>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bdb0      	pop	{r4, r5, r7, pc}

08000bfc <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db01      	blt.n	8000c12 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e018      	b.n	8000c44 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8000c1c:	d101      	bne.n	8000c22 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e010      	b.n	8000c44 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c2a:	2be0      	cmp	r3, #224	; 0xe0
 8000c2c:	d101      	bne.n	8000c32 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e008      	b.n	8000c44 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000c3a:	2bf0      	cmp	r3, #240	; 0xf0
 8000c3c:	d101      	bne.n	8000c42 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e000      	b.n	8000c44 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8000c4e:	b5b0      	push	{r4, r5, r7, lr}
 8000c50:	b08a      	sub	sp, #40	; 0x28
 8000c52:	af02      	add	r7, sp, #8
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8000c60:	2300      	movs	r3, #0
 8000c62:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3307      	adds	r3, #7
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da00      	bge.n	8000c70 <OLED_PrintString+0x22>
 8000c6e:	3307      	adds	r3, #7
 8000c70:	10db      	asrs	r3, r3, #3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	7852      	ldrb	r2, [r2, #1]
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3304      	adds	r3, #4
 8000c80:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8000c82:	e07d      	b.n	8000d80 <OLED_PrintString+0x132>
  {
    found = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8000c88:	8bfb      	ldrh	r3, [r7, #30]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffb4 	bl	8000bfc <_OLED_GetUTF8Len>
 8000c94:	4603      	mov	r3, r0
 8000c96:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8000c98:	7ebb      	ldrb	r3, [r7, #26]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d078      	beq.n	8000d90 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	773b      	strb	r3, [r7, #28]
 8000ca2:	e032      	b.n	8000d0a <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	7f3a      	ldrb	r2, [r7, #28]
 8000caa:	7ef9      	ldrb	r1, [r7, #27]
 8000cac:	fb01 f202 	mul.w	r2, r1, r2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8000cb4:	8bfb      	ldrh	r3, [r7, #30]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	7eba      	ldrb	r2, [r7, #26]
 8000cbc:	6979      	ldr	r1, [r7, #20]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fc78 	bl	80025b4 <memcmp>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d11c      	bne.n	8000d04 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	1d1c      	adds	r4, r3, #4
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	785d      	ldrb	r5, [r3, #1]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	7bb9      	ldrb	r1, [r7, #14]
 8000cd8:	7bf8      	ldrb	r0, [r7, #15]
 8000cda:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	f7ff fdef 	bl	80008c8 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	785a      	ldrb	r2, [r3, #1]
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000cf4:	7ebb      	ldrb	r3, [r7, #26]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	8bfb      	ldrh	r3, [r7, #30]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	777b      	strb	r3, [r7, #29]
        break;
 8000d02:	e007      	b.n	8000d14 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8000d04:	7f3b      	ldrb	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	773b      	strb	r3, [r7, #28]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7a1b      	ldrb	r3, [r3, #8]
 8000d0e:	7f3a      	ldrb	r2, [r7, #28]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3c7      	bcc.n	8000ca4 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8000d14:	7f7b      	ldrb	r3, [r7, #29]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d132      	bne.n	8000d80 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8000d1a:	7ebb      	ldrb	r3, [r7, #26]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d119      	bne.n	8000d54 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8000d20:	8bfb      	ldrh	r3, [r7, #30]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	4413      	add	r3, r2
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68dc      	ldr	r4, [r3, #12]
 8000d2c:	7bb9      	ldrb	r1, [r7, #14]
 8000d2e:	7bf8      	ldrb	r0, [r7, #15]
 8000d30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4623      	mov	r3, r4
 8000d38:	f7ff ff31 	bl	8000b9e <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	785a      	ldrb	r2, [r3, #1]
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	4413      	add	r3, r2
 8000d46:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000d48:	7ebb      	ldrb	r3, [r7, #26]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	8bfb      	ldrh	r3, [r7, #30]
 8000d4e:	4413      	add	r3, r2
 8000d50:	83fb      	strh	r3, [r7, #30]
 8000d52:	e015      	b.n	8000d80 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	7bb9      	ldrb	r1, [r7, #14]
 8000d5a:	7bf8      	ldrb	r0, [r7, #15]
 8000d5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	2220      	movs	r2, #32
 8000d66:	f7ff ff1a 	bl	8000b9e <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	785a      	ldrb	r2, [r3, #1]
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	4413      	add	r3, r2
 8000d74:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8000d76:	7ebb      	ldrb	r3, [r7, #26]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	8bfb      	ldrh	r3, [r7, #30]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8000d80:	8bfb      	ldrh	r3, [r7, #30]
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f47f af7b 	bne.w	8000c84 <OLED_PrintString+0x36>
      }
    }
  }
}
 8000d8e:	e000      	b.n	8000d92 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8000d90:	bf00      	nop
}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x40>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_MspInit+0x40>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_MspInit+0x40>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x40>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e26:	f000 f875 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f7ff fff7 	bl	8000e2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e42:	490c      	ldr	r1, [pc, #48]	; (8000e74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e58:	4c09      	ldr	r4, [pc, #36]	; (8000e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f001 fbbd 	bl	80025e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6a:	f7ff fa5f 	bl	800032c <main>
  bx lr
 8000e6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e78:	08002fe4 	.word	0x08002fe4
  ldr r2, =_sbss
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e80:	20000508 	.word	0x20000508

08000e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_2_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x28>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f92b 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff ff7a 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f935 	bl	8001142 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f90b 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_IncTick+0x20>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000504 	.word	0x20000504

08000f38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000504 	.word	0x20000504

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff0 	bl	8000f38 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffe0 	bl	8000f38 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff90 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff49 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff5e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff90 	bl	800104c <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5f 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb0 	bl	80010b0 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b08b      	sub	sp, #44	; 0x2c
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	e179      	b.n	8001464 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001170:	2201      	movs	r2, #1
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 8168 	bne.w	800145e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4a96      	ldr	r2, [pc, #600]	; (80013ec <HAL_GPIO_Init+0x290>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d05e      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 8001198:	4a94      	ldr	r2, [pc, #592]	; (80013ec <HAL_GPIO_Init+0x290>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d875      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 800119e:	4a94      	ldr	r2, [pc, #592]	; (80013f0 <HAL_GPIO_Init+0x294>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d058      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011a4:	4a92      	ldr	r2, [pc, #584]	; (80013f0 <HAL_GPIO_Init+0x294>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d86f      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011aa:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_GPIO_Init+0x298>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d052      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011b0:	4a90      	ldr	r2, [pc, #576]	; (80013f4 <HAL_GPIO_Init+0x298>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d869      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011b6:	4a90      	ldr	r2, [pc, #576]	; (80013f8 <HAL_GPIO_Init+0x29c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d04c      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011bc:	4a8e      	ldr	r2, [pc, #568]	; (80013f8 <HAL_GPIO_Init+0x29c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d863      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011c2:	4a8e      	ldr	r2, [pc, #568]	; (80013fc <HAL_GPIO_Init+0x2a0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d046      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
 80011c8:	4a8c      	ldr	r2, [pc, #560]	; (80013fc <HAL_GPIO_Init+0x2a0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d85d      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d82a      	bhi.n	8001228 <HAL_GPIO_Init+0xcc>
 80011d2:	2b12      	cmp	r3, #18
 80011d4:	d859      	bhi.n	800128a <HAL_GPIO_Init+0x12e>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <HAL_GPIO_Init+0x80>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001231 	.word	0x08001231
 80011e4:	08001243 	.word	0x08001243
 80011e8:	08001285 	.word	0x08001285
 80011ec:	0800128b 	.word	0x0800128b
 80011f0:	0800128b 	.word	0x0800128b
 80011f4:	0800128b 	.word	0x0800128b
 80011f8:	0800128b 	.word	0x0800128b
 80011fc:	0800128b 	.word	0x0800128b
 8001200:	0800128b 	.word	0x0800128b
 8001204:	0800128b 	.word	0x0800128b
 8001208:	0800128b 	.word	0x0800128b
 800120c:	0800128b 	.word	0x0800128b
 8001210:	0800128b 	.word	0x0800128b
 8001214:	0800128b 	.word	0x0800128b
 8001218:	0800128b 	.word	0x0800128b
 800121c:	0800128b 	.word	0x0800128b
 8001220:	08001239 	.word	0x08001239
 8001224:	0800124d 	.word	0x0800124d
 8001228:	4a75      	ldr	r2, [pc, #468]	; (8001400 <HAL_GPIO_Init+0x2a4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800122e:	e02c      	b.n	800128a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e029      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	3304      	adds	r3, #4
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e024      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	3308      	adds	r3, #8
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e01f      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	330c      	adds	r3, #12
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e01a      	b.n	800128c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800125e:	2304      	movs	r3, #4
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e013      	b.n	800128c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800126c:	2308      	movs	r3, #8
 800126e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	611a      	str	r2, [r3, #16]
          break;
 8001276:	e009      	b.n	800128c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001278:	2308      	movs	r3, #8
 800127a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	615a      	str	r2, [r3, #20]
          break;
 8001282:	e003      	b.n	800128c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x130>
          break;
 800128a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d801      	bhi.n	8001296 <HAL_GPIO_Init+0x13a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	e001      	b.n	800129a <HAL_GPIO_Init+0x13e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d802      	bhi.n	80012a8 <HAL_GPIO_Init+0x14c>
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x152>
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	3b08      	subs	r3, #8
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	210f      	movs	r1, #15
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	6a39      	ldr	r1, [r7, #32]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	431a      	orrs	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80c1 	beq.w	800145e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012dc:	4b49      	ldr	r3, [pc, #292]	; (8001404 <HAL_GPIO_Init+0x2a8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2a8>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_GPIO_Init+0x2a8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f4:	4a44      	ldr	r2, [pc, #272]	; (8001408 <HAL_GPIO_Init+0x2ac>)
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3c      	ldr	r2, [pc, #240]	; (800140c <HAL_GPIO_Init+0x2b0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d01f      	beq.n	8001360 <HAL_GPIO_Init+0x204>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_GPIO_Init+0x2b4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d019      	beq.n	800135c <HAL_GPIO_Init+0x200>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a3a      	ldr	r2, [pc, #232]	; (8001414 <HAL_GPIO_Init+0x2b8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1fc>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a39      	ldr	r2, [pc, #228]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1f8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a38      	ldr	r2, [pc, #224]	; (800141c <HAL_GPIO_Init+0x2c0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1f4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a37      	ldr	r2, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x2c4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1f0>
 8001348:	2305      	movs	r3, #5
 800134a:	e00a      	b.n	8001362 <HAL_GPIO_Init+0x206>
 800134c:	2306      	movs	r3, #6
 800134e:	e008      	b.n	8001362 <HAL_GPIO_Init+0x206>
 8001350:	2304      	movs	r3, #4
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x206>
 8001354:	2303      	movs	r3, #3
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x206>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x206>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x206>
 8001360:	2300      	movs	r3, #0
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001372:	4925      	ldr	r1, [pc, #148]	; (8001408 <HAL_GPIO_Init+0x2ac>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	4924      	ldr	r1, [pc, #144]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4920      	ldr	r1, [pc, #128]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	491a      	ldr	r1, [pc, #104]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4916      	ldr	r1, [pc, #88]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d025      	beq.n	8001428 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4910      	ldr	r1, [pc, #64]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e025      	b.n	8001436 <HAL_GPIO_Init+0x2da>
 80013ea:	bf00      	nop
 80013ec:	10320000 	.word	0x10320000
 80013f0:	10310000 	.word	0x10310000
 80013f4:	10220000 	.word	0x10220000
 80013f8:	10210000 	.word	0x10210000
 80013fc:	10120000 	.word	0x10120000
 8001400:	10110000 	.word	0x10110000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	40010800 	.word	0x40010800
 8001410:	40010c00 	.word	0x40010c00
 8001414:	40011000 	.word	0x40011000
 8001418:	40011400 	.word	0x40011400
 800141c:	40011800 	.word	0x40011800
 8001420:	40011c00 	.word	0x40011c00
 8001424:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_GPIO_Init+0x324>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	43db      	mvns	r3, r3
 8001430:	4913      	ldr	r1, [pc, #76]	; (8001480 <HAL_GPIO_Init+0x324>)
 8001432:	4013      	ands	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_GPIO_Init+0x324>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <HAL_GPIO_Init+0x324>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_GPIO_Init+0x324>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	43db      	mvns	r3, r3
 8001458:	4909      	ldr	r1, [pc, #36]	; (8001480 <HAL_GPIO_Init+0x324>)
 800145a:	4013      	ands	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	3301      	adds	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	fa22 f303 	lsr.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f ae7e 	bne.w	8001170 <HAL_GPIO_Init+0x14>
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	372c      	adds	r7, #44	; 0x2c
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e12b      	b.n	80016ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe fefe 	bl	80002ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	; 0x24
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e8:	f001 f832 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a81      	ldr	r2, [pc, #516]	; (80016f8 <HAL_I2C_Init+0x274>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d807      	bhi.n	8001508 <HAL_I2C_Init+0x84>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a80      	ldr	r2, [pc, #512]	; (80016fc <HAL_I2C_Init+0x278>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bf94      	ite	ls
 8001500:	2301      	movls	r3, #1
 8001502:	2300      	movhi	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	e006      	b.n	8001516 <HAL_I2C_Init+0x92>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a7d      	ldr	r2, [pc, #500]	; (8001700 <HAL_I2C_Init+0x27c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e7      	b.n	80016ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4a78      	ldr	r2, [pc, #480]	; (8001704 <HAL_I2C_Init+0x280>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a6a      	ldr	r2, [pc, #424]	; (80016f8 <HAL_I2C_Init+0x274>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d802      	bhi.n	8001558 <HAL_I2C_Init+0xd4>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	e009      	b.n	800156c <HAL_I2C_Init+0xe8>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a69      	ldr	r2, [pc, #420]	; (8001708 <HAL_I2C_Init+0x284>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800157e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	495c      	ldr	r1, [pc, #368]	; (80016f8 <HAL_I2C_Init+0x274>)
 8001588:	428b      	cmp	r3, r1
 800158a:	d819      	bhi.n	80015c0 <HAL_I2C_Init+0x13c>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fbb1 f3f3 	udiv	r3, r1, r3
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015a0:	400b      	ands	r3, r1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00a      	beq.n	80015bc <HAL_I2C_Init+0x138>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1e59      	subs	r1, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ba:	e051      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015bc:	2304      	movs	r3, #4
 80015be:	e04f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_I2C_Init+0x168>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	e012      	b.n	8001612 <HAL_I2C_Init+0x18e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	0099      	lsls	r1, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x196>
 8001616:	2301      	movs	r3, #1
 8001618:	e022      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10e      	bne.n	8001640 <HAL_I2C_Init+0x1bc>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e58      	subs	r0, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6859      	ldr	r1, [r3, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	440b      	add	r3, r1
 8001630:	fbb0 f3f3 	udiv	r3, r0, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163e:	e00f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	6809      	ldr	r1, [r1, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800168e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6911      	ldr	r1, [r2, #16]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68d2      	ldr	r2, [r2, #12]
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	001e847f 	.word	0x001e847f
 8001700:	003d08ff 	.word	0x003d08ff
 8001704:	431bde83 	.word	0x431bde83
 8001708:	10624dd3 	.word	0x10624dd3

0800170c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
 800171c:	4613      	mov	r3, r2
 800171e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fc0a 	bl	8000f38 <HAL_GetTick>
 8001724:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b20      	cmp	r3, #32
 8001730:	f040 80e0 	bne.w	80018f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2319      	movs	r3, #25
 800173a:	2201      	movs	r2, #1
 800173c:	4970      	ldr	r1, [pc, #448]	; (8001900 <HAL_I2C_Master_Transmit+0x1f4>)
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f964 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	e0d3      	b.n	80018f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_I2C_Master_Transmit+0x50>
 8001758:	2302      	movs	r3, #2
 800175a:	e0cc      	b.n	80018f6 <HAL_I2C_Master_Transmit+0x1ea>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b01      	cmp	r3, #1
 8001770:	d007      	beq.n	8001782 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001790:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2221      	movs	r2, #33	; 0x21
 8001796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2210      	movs	r2, #16
 800179e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	893a      	ldrh	r2, [r7, #8]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_I2C_Master_Transmit+0x1f8>)
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c4:	8979      	ldrh	r1, [r7, #10]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	6a3a      	ldr	r2, [r7, #32]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f89c 	bl	8001908 <I2C_MasterRequestWrite>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e08d      	b.n	80018f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017f0:	e066      	b.n	80018c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	6a39      	ldr	r1, [r7, #32]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fa22 	bl	8001c40 <I2C_WaitOnTXEFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00d      	beq.n	800181e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b04      	cmp	r3, #4
 8001808:	d107      	bne.n	800181a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001818:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06b      	b.n	80018f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d11b      	bne.n	8001894 <HAL_I2C_Master_Transmit+0x188>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d017      	beq.n	8001894 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	6a39      	ldr	r1, [r7, #32]
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fa19 	bl	8001cd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d107      	bne.n	80018bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e01a      	b.n	80018f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d194      	bne.n	80017f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	00100002 	.word	0x00100002
 8001904:	ffff0000 	.word	0xffff0000

08001908 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	460b      	mov	r3, r1
 8001916:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d006      	beq.n	8001932 <I2C_MasterRequestWrite+0x2a>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d003      	beq.n	8001932 <I2C_MasterRequestWrite+0x2a>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001930:	d108      	bne.n	8001944 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e00b      	b.n	800195c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	2b12      	cmp	r3, #18
 800194a:	d107      	bne.n	800195c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800195a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f84f 	bl	8001a0c <I2C_WaitOnFlagUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00d      	beq.n	8001990 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001982:	d103      	bne.n	800198c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e035      	b.n	80019fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001998:	d108      	bne.n	80019ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800199a:	897b      	ldrh	r3, [r7, #10]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	e01b      	b.n	80019e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019ac:	897b      	ldrh	r3, [r7, #10]
 80019ae:	11db      	asrs	r3, r3, #7
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0306 	and.w	r3, r3, #6
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f063 030f 	orn	r3, r3, #15
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <I2C_MasterRequestWrite+0xfc>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f898 	bl	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e010      	b.n	80019fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019da:	897b      	ldrh	r3, [r7, #10]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <I2C_MasterRequestWrite+0x100>)
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f888 	bl	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	00010008 	.word	0x00010008
 8001a08:	00010002 	.word	0x00010002

08001a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a1c:	e048      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d044      	beq.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a26:	f7ff fa87 	bl	8000f38 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d302      	bcc.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d139      	bne.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10d      	bne.n	8001a62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	e00c      	b.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d116      	bne.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e023      	b.n	8001af8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10d      	bne.n	8001ad6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	e00c      	b.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d093      	beq.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b0e:	e071      	b.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d123      	bne.n	8001b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e067      	b.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	d041      	beq.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b70:	f7ff f9e2 	bl	8000f38 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d302      	bcc.n	8001b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d136      	bne.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10c      	bne.n	8001baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	e00b      	b.n	8001bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d016      	beq.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f043 0220 	orr.w	r2, r3, #32
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e021      	b.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10c      	bne.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	43da      	mvns	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e00b      	b.n	8001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4013      	ands	r3, r2
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f af6d 	bne.w	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c4c:	e034      	b.n	8001cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f886 	bl	8001d60 <I2C_IsAcknowledgeFailed>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e034      	b.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d028      	beq.n	8001cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff f967 	bl	8000f38 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11d      	bne.n	8001cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d016      	beq.n	8001cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0220 	orr.w	r2, r3, #32
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e007      	b.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	2b80      	cmp	r3, #128	; 0x80
 8001cc4:	d1c3      	bne.n	8001c4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cdc:	e034      	b.n	8001d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f83e 	bl	8001d60 <I2C_IsAcknowledgeFailed>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e034      	b.n	8001d58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d028      	beq.n	8001d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7ff f91f 	bl	8000f38 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11d      	bne.n	8001d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d016      	beq.n	8001d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f043 0220 	orr.w	r2, r3, #32
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e007      	b.n	8001d58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d1c3      	bne.n	8001cde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d11b      	bne.n	8001db0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e272      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de8:	4b8f      	ldr	r3, [pc, #572]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d112      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d168      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e24c      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x76>
 8001e24:	4b80      	ldr	r3, [pc, #512]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7f      	ldr	r2, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e02e      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7a      	ldr	r2, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b78      	ldr	r3, [pc, #480]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a77      	ldr	r2, [pc, #476]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0xbc>
 8001e5e:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e78:	4b6b      	ldr	r3, [pc, #428]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a67      	ldr	r2, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f84e 	bl	8000f38 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f84a 	bl	8000f38 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e200      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe4>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f83a 	bl	8000f38 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f836 	bl	8000f38 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1ec      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x10c>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b43      	ldr	r3, [pc, #268]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1c0      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4939      	ldr	r1, [pc, #228]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ffef 	bl	8000f38 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7fe ffeb 	bl	8000f38 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4927      	ldr	r1, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe ffce 	bl	8000f38 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7fe ffca 	bl	8000f38 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e180      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03a      	beq.n	8002040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe ffae 	bl	8000f38 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe ffaa 	bl	8000f38 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e160      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 faba 	bl	8002578 <RCC_Delay>
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7fe ff94 	bl	8000f38 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe ff90 	bl	8000f38 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d908      	bls.n	8002034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e146      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	42420000 	.word	0x42420000
 8002030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e9      	bne.n	8002014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a6 	beq.w	800219a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b82      	ldr	r3, [pc, #520]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7e      	ldr	r2, [pc, #504]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe ff51 	bl	8000f38 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7fe ff4d 	bl	8000f38 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e103      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x312>
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e02d      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x334>
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a66      	ldr	r2, [pc, #408]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	e01c      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x356>
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a60      	ldr	r2, [pc, #384]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d015      	beq.n	800215e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe ff01 	bl	8000f38 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fefd 	bl	8000f38 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0b1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCC_OscConfig+0x37e>
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe feeb 	bl	8000f38 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fee7 	bl	8000f38 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ee      	bne.n	8002166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d061      	beq.n	8002274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d146      	bne.n	8002246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe febb 	bl	8000f38 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe feb7 	bl	8000f38 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e06d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4921      	ldr	r1, [pc, #132]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a19      	ldr	r1, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	430b      	orrs	r3, r1
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fe8b 	bl	8000f38 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fe87 	bl	8000f38 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e03d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x46a>
 8002244:	e035      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fe74 	bl	8000f38 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fe70 	bl	8000f38 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e026      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x498>
 8002272:	e01e      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e019      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x500>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4965      	ldr	r1, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800233e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d040      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e073      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4936      	ldr	r1, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fdc2 	bl	8000f38 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fdbe 	bl	8000f38 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e053      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d210      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1cc>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fd20 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	08002fb0 	.word	0x08002fb0
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x30>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x36>
 80024c2:	e027      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	e027      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0c5b      	lsrs	r3, r3, #17
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e004      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	693b      	ldr	r3, [r7, #16]
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	08002fc8 	.word	0x08002fc8
 8002534:	08002fd8 	.word	0x08002fd8
 8002538:	003d0900 	.word	0x003d0900

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_RCC_GetHCLKFreq+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff2 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08002fc0 	.word	0x08002fc0

08002578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <RCC_Delay+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <RCC_Delay+0x38>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <RCC_Delay+0x1c>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000000 	.word	0x20000000
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <memcmp>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	3901      	subs	r1, #1
 80025b8:	4402      	add	r2, r0
 80025ba:	4290      	cmp	r0, r2
 80025bc:	d101      	bne.n	80025c2 <memcmp+0xe>
 80025be:	2000      	movs	r0, #0
 80025c0:	e005      	b.n	80025ce <memcmp+0x1a>
 80025c2:	7803      	ldrb	r3, [r0, #0]
 80025c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80025c8:	42a3      	cmp	r3, r4
 80025ca:	d001      	beq.n	80025d0 <memcmp+0x1c>
 80025cc:	1b18      	subs	r0, r3, r4
 80025ce:	bd10      	pop	{r4, pc}
 80025d0:	3001      	adds	r0, #1
 80025d2:	e7f2      	b.n	80025ba <memcmp+0x6>

080025d4 <memset>:
 80025d4:	4603      	mov	r3, r0
 80025d6:	4402      	add	r2, r0
 80025d8:	4293      	cmp	r3, r2
 80025da:	d100      	bne.n	80025de <memset+0xa>
 80025dc:	4770      	bx	lr
 80025de:	f803 1b01 	strb.w	r1, [r3], #1
 80025e2:	e7f9      	b.n	80025d8 <memset+0x4>

080025e4 <__libc_init_array>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	2600      	movs	r6, #0
 80025e8:	4d0c      	ldr	r5, [pc, #48]	; (800261c <__libc_init_array+0x38>)
 80025ea:	4c0d      	ldr	r4, [pc, #52]	; (8002620 <__libc_init_array+0x3c>)
 80025ec:	1b64      	subs	r4, r4, r5
 80025ee:	10a4      	asrs	r4, r4, #2
 80025f0:	42a6      	cmp	r6, r4
 80025f2:	d109      	bne.n	8002608 <__libc_init_array+0x24>
 80025f4:	f000 f828 	bl	8002648 <_init>
 80025f8:	2600      	movs	r6, #0
 80025fa:	4d0a      	ldr	r5, [pc, #40]	; (8002624 <__libc_init_array+0x40>)
 80025fc:	4c0a      	ldr	r4, [pc, #40]	; (8002628 <__libc_init_array+0x44>)
 80025fe:	1b64      	subs	r4, r4, r5
 8002600:	10a4      	asrs	r4, r4, #2
 8002602:	42a6      	cmp	r6, r4
 8002604:	d105      	bne.n	8002612 <__libc_init_array+0x2e>
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	f855 3b04 	ldr.w	r3, [r5], #4
 800260c:	4798      	blx	r3
 800260e:	3601      	adds	r6, #1
 8002610:	e7ee      	b.n	80025f0 <__libc_init_array+0xc>
 8002612:	f855 3b04 	ldr.w	r3, [r5], #4
 8002616:	4798      	blx	r3
 8002618:	3601      	adds	r6, #1
 800261a:	e7f2      	b.n	8002602 <__libc_init_array+0x1e>
 800261c:	08002fdc 	.word	0x08002fdc
 8002620:	08002fdc 	.word	0x08002fdc
 8002624:	08002fdc 	.word	0x08002fdc
 8002628:	08002fe0 	.word	0x08002fe0

0800262c <memcpy>:
 800262c:	440a      	add	r2, r1
 800262e:	4291      	cmp	r1, r2
 8002630:	f100 33ff 	add.w	r3, r0, #4294967295
 8002634:	d100      	bne.n	8002638 <memcpy+0xc>
 8002636:	4770      	bx	lr
 8002638:	b510      	push	{r4, lr}
 800263a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800263e:	4291      	cmp	r1, r2
 8002640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002644:	d1f9      	bne.n	800263a <memcpy+0xe>
 8002646:	bd10      	pop	{r4, pc}

08002648 <_init>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr

08002654 <_fini>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr
